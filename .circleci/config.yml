version: 2.1
jobs:
  checkout:
    docker:
      - image: kernelci/build-gcc-8_x86:latest
    working_directory: ~/build
    steps:
      - checkout
      - restore_cache:
         keys:
           - build-machine-{{ checksum "Makefile" }}
      - run:
          name: 'Prepare build environment...'
          command: |
            if [ -d "linux-stable" ]; then
              echo 'Build environment was cached.'
            else
              echo 'Build environment was not cached.'
              apt-get update -qq
              apt-get install -y apt-utils
              apt-get install -y sudo
              apt-get install -y git
              git config --global user.email $GH_EMAIL
              git config --global user.name $GH_NAME
              make prepare_kernel
              make patch
            fi
            ls
      - save_cache:
          key: build-machine-{{ checksum "Makefile" }}
          paths:
            - linux-stable
            - pristine
            - patches
      - persist_to_workspace:
          root: .
          paths:
            - linux-stable
            - pristine
            - patches
  flow:
    docker:
      - image: kernelci/build-gcc-8_x86:latest
    working_directory: ~/build
    steps:
      - checkout
      - attach_workspace:
          at: ~/build
      - run: 'apt-get update -qq --allow-releaseinfo-change'
      - run: 'apt-get install -y sudo rpm cpio'
      - run: 'apt-get install -y build-essential rsync libtool libncurses5-dev libncursesw5-dev bc pkg-config zsh libelf-dev bison flex'
      - run: 'make config_circle'
      - run: 'make compile'
  flow_off:
    docker:
      - image: kernelci/build-gcc-8_x86:latest
    working_directory: ~/build
    steps:
      - checkout
      - attach_workspace:
          at: ~/build
      - run: 'apt-get update -qq --allow-releaseinfo-change'
      - run: 'apt-get install -y sudo rpm cpio'
      - run: 'apt-get install -y build-essential rsync libtool libncurses5-dev libncursesw5-dev bc pkg-config zsh libelf-dev bison flex'
      - run: 'make config_circle_off'
      - run: 'make compile'
  test_patch:
    docker:
      - image: kernelci/build-gcc-8_x86:latest
    working_directory: ~/build
    steps:
      - checkout
      - attach_workspace:
          at: ~/build
      - run: 'apt-get update -qq --allow-releaseinfo-change'
      - run: 'apt-get install -y git'
      - run: 'make test_patch'
  publish-github-release:
    docker:
      - image: circleci/golang
    steps:
      - attach_workspace:
          at: ~/build
      - run:
          name: "Publish Release on GitHub"
          command: |
            go get github.com/tcnksm/ghr
            ghr -t ${GH_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${CIRCLE_TAG} ~/build/patches/
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - checkout:
          filters:
            tags:
              only: /.*/
      - flow:
          requires:
            - checkout
      - flow_off:
          requires:
            - checkout
      - test_patch:
          requires:
            - flow
            - flow_off
      - publish-github-release:
          requires:
            - checkout
          filters:
            tags:
              ignore: /test/
            branches:
              ignore: /.*/
